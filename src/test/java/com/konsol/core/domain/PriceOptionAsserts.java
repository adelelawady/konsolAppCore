package com.konsol.core.domain;

import static com.konsol.core.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PriceOptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceOptionAllPropertiesEquals(PriceOption expected, PriceOption actual) {
        assertPriceOptionAutoGeneratedPropertiesEquals(expected, actual);
        assertPriceOptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceOptionAllUpdatablePropertiesEquals(PriceOption expected, PriceOption actual) {
        assertPriceOptionUpdatableFieldsEquals(expected, actual);
        assertPriceOptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceOptionAutoGeneratedPropertiesEquals(PriceOption expected, PriceOption actual) {
        assertThat(expected)
            .as("Verify PriceOption auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceOptionUpdatableFieldsEquals(PriceOption expected, PriceOption actual) {
        assertThat(expected)
            .as("Verify PriceOption relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getValue()).as("check value").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getValue()))
            .satisfies(e -> assertThat(e.getProductId()).as("check productId").isEqualTo(actual.getProductId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPriceOptionUpdatableRelationshipsEquals(PriceOption expected, PriceOption actual) {
        // empty method
    }
}
