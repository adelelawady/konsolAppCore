/**
 * Konsol Core API
 * Konsol Core API documentation
 *
 * OpenAPI spec version: 0.0.1
 * Contact: adel50ali50@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CreateInvoiceItemDTO } from '../model/createInvoiceItemDTO';
import { InvoiceDTO } from '../model/invoiceDTO';
import { InvoiceItemDTO } from '../model/invoiceItemDTO';
import { InvoiceItemUpdateDTO } from '../model/invoiceItemUpdateDTO';
import { InvoiceItemViewDTO } from '../model/invoiceItemViewDTO';
import { InvoicePrintDTO } from '../model/invoicePrintDTO';
import { InvoiceUpdateDTO } from '../model/invoiceUpdateDTO';
import { InvoiceViewDTO } from '../model/invoiceViewDTO';
import { InvoiceViewDTOContainer } from '../model/invoiceViewDTOContainer';
import { InvoiceViewSimpleDTO } from '../model/invoiceViewSimpleDTO';
import { InvoicesSearchModel } from '../model/invoicesSearchModel';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class InvoiceResourceService {
  protected basePath = 'http://localhost:8080/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * add invoice item to invocie
   * add item to invoice includes price qty etc ..
   * @param id
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addInvoiceItem(id: string, body?: CreateInvoiceItemDTO, observe?: 'body', reportProgress?: boolean): Observable<InvoiceDTO>;
  public addInvoiceItem(
    id: string,
    body?: CreateInvoiceItemDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InvoiceDTO>>;
  public addInvoiceItem(
    id: string,
    body?: CreateInvoiceItemDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InvoiceDTO>>;
  public addInvoiceItem(id: string, body?: CreateInvoiceItemDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling addInvoiceItem.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<InvoiceDTO>('post', `${this.basePath}/invoices/${encodeURIComponent(String(id))}/add`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createInvoice(body: InvoiceDTO, observe?: 'body', reportProgress?: boolean): Observable<InvoiceDTO>;
  public createInvoice(body: InvoiceDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvoiceDTO>>;
  public createInvoice(body: InvoiceDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvoiceDTO>>;
  public createInvoice(body: InvoiceDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<InvoiceDTO>('post', `${this.basePath}/invoices`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * delete invoice by invoice id
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteInvoice(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteInvoice(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteInvoice(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteInvoice(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/invoices/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteInvoiceItemFromInvoice(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteInvoiceItemFromInvoice(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteInvoiceItemFromInvoice(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteInvoiceItemFromInvoice(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteInvoiceItemFromInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/invoices/invoice-items/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param page Zero-based page index (0..N)
   * @param size The size of the page to be returned
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param eagerload
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllInvoices(
    page?: number,
    size?: number,
    sort?: Array<string>,
    eagerload?: boolean,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<InvoiceDTO>>;
  public getAllInvoices(
    page?: number,
    size?: number,
    sort?: Array<string>,
    eagerload?: boolean,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<InvoiceDTO>>>;
  public getAllInvoices(
    page?: number,
    size?: number,
    sort?: Array<string>,
    eagerload?: boolean,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<InvoiceDTO>>>;
  public getAllInvoices(
    page?: number,
    size?: number,
    sort?: Array<string>,
    eagerload?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (page !== undefined && page !== null) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (size !== undefined && size !== null) {
      queryParameters = queryParameters.set('size', <any>size);
    }
    if (sort) {
      sort.forEach(element => {
        queryParameters = queryParameters.append('sort', <any>element);
      });
    }
    if (eagerload !== undefined && eagerload !== null) {
      queryParameters = queryParameters.set('eagerload', <any>eagerload);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<InvoiceDTO>>('get', `${this.basePath}/invoices`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * get single invoice by id
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getInvoice(id: string, observe?: 'body', reportProgress?: boolean): Observable<InvoiceDTO>;
  public getInvoice(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvoiceDTO>>;
  public getInvoice(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvoiceDTO>>;
  public getInvoice(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<InvoiceDTO>('get', `${this.basePath}/invoices/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getInvoiceItems(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InvoiceItemDTO>>;
  public getInvoiceItems(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InvoiceItemDTO>>>;
  public getInvoiceItems(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InvoiceItemDTO>>>;
  public getInvoiceItems(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getInvoiceItems.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<InvoiceItemDTO>>(
      'get',
      `${this.basePath}/invoices/${encodeURIComponent(String(id))}/invoiceItems`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   * get single invoice by id
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getInvoiceView(id: string, observe?: 'body', reportProgress?: boolean): Observable<InvoiceViewDTO>;
  public getInvoiceView(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvoiceViewDTO>>;
  public getInvoiceView(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvoiceViewDTO>>;
  public getInvoiceView(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getInvoiceView.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<InvoiceViewDTO>('get', `${this.basePath}/invoices/view/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * create a printable object of invoice print dto and global options used for user and general info
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPrintInvoiceObject(id: string, observe?: 'body', reportProgress?: boolean): Observable<InvoicePrintDTO>;
  public getPrintInvoiceObject(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvoicePrintDTO>>;
  public getPrintInvoiceObject(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvoicePrintDTO>>;
  public getPrintInvoiceObject(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getPrintInvoiceObject.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<InvoicePrintDTO>('get', `${this.basePath}/invoices/${encodeURIComponent(String(id))}/print`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * initialize a new Invoice
   * @param kind
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public initializeNewInvoice(kind: string, observe?: 'body', reportProgress?: boolean): Observable<InvoiceDTO>;
  public initializeNewInvoice(kind: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvoiceDTO>>;
  public initializeNewInvoice(kind: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvoiceDTO>>;
  public initializeNewInvoice(kind: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (kind === null || kind === undefined) {
      throw new Error('Required parameter kind was null or undefined when calling initializeNewInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<InvoiceDTO>('get', `${this.basePath}/invoices/${encodeURIComponent(String(kind))}/create`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Search Invoices [ pagination , time , plaintext , sort ] { view model dto }
   * invoice view dto search and pagination and sort request
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public invoicesViewSearchPaginate(
    body: InvoicesSearchModel,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InvoiceViewDTOContainer>;
  public invoicesViewSearchPaginate(
    body: InvoicesSearchModel,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InvoiceViewDTOContainer>>;
  public invoicesViewSearchPaginate(
    body: InvoicesSearchModel,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InvoiceViewDTOContainer>>;
  public invoicesViewSearchPaginate(body: InvoicesSearchModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling invoicesViewSearchPaginate.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<InvoiceViewDTOContainer>('post', `${this.basePath}/invoices/view`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * save and submit invoice
   * save and submit invoice by invoice id  changes invoice status to active
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public saveInvoice(id: string, observe?: 'body', reportProgress?: boolean): Observable<InvoiceViewSimpleDTO>;
  public saveInvoice(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvoiceViewSimpleDTO>>;
  public saveInvoice(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvoiceViewSimpleDTO>>;
  public saveInvoice(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling saveInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<InvoiceViewSimpleDTO>('post', `${this.basePath}/invoices/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * update invoice
   * @param body
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateInvoice(body: InvoiceUpdateDTO, id: string, observe?: 'body', reportProgress?: boolean): Observable<InvoiceViewSimpleDTO>;
  public updateInvoice(
    body: InvoiceUpdateDTO,
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InvoiceViewSimpleDTO>>;
  public updateInvoice(
    body: InvoiceUpdateDTO,
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InvoiceViewSimpleDTO>>;
  public updateInvoice(body: InvoiceUpdateDTO, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateInvoice.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateInvoice.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json', 'application/merge-patch+json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<InvoiceViewSimpleDTO>('patch', `${this.basePath}/invoices/${encodeURIComponent(String(id))}`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * update invoices invoice item
   * @param id
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateInvoiceItem(
    id: string,
    body?: InvoiceItemUpdateDTO,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InvoiceItemViewDTO>;
  public updateInvoiceItem(
    id: string,
    body?: InvoiceItemUpdateDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InvoiceItemViewDTO>>;
  public updateInvoiceItem(
    id: string,
    body?: InvoiceItemUpdateDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InvoiceItemViewDTO>>;
  public updateInvoiceItem(
    id: string,
    body?: InvoiceItemUpdateDTO,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateInvoiceItem.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<InvoiceItemViewDTO>(
      'patch',
      `${this.basePath}/invoices/invoice-items/${encodeURIComponent(String(id))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
